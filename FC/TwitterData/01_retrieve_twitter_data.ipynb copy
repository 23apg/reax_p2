{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "from pprint import pprint\n",
    "import pymongo\n",
    "import tweepy\n",
    "import json\n",
    "import numpy as np\n",
    "from twtkey import (consumer_key, \n",
    "                    consumer_secret, \n",
    "                    access_token, \n",
    "                    access_token_secret)\n",
    "\n",
    "#connection with Mongo\n",
    "conn = 'mongodb://localhost:27017'\n",
    "client = pymongo.MongoClient(conn)\n",
    "db = client.project_reax\n",
    "db_cities_full = db.cities_full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import and Initialize Sentiment Analyzer\n",
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
    "analyzer = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup Tweepy API Authentication\n",
    "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_token_secret)\n",
    "api = tweepy.API(auth, parser=tweepy.parsers.JSONParser())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n",
      "error\n"
     ]
    }
   ],
   "source": [
    "list_city_ids = []\n",
    "results = db_cities_full.find()\n",
    "for result in results:\n",
    "    try:\n",
    "        list_city_ids.append(result[\"woeids\"][0][\"Id\"])\n",
    "    except:\n",
    "        print(\"error\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2459115,\n",
       " 2442047,\n",
       " 2379574,\n",
       " 2424766,\n",
       " 2471217,\n",
       " 2471390,\n",
       " 2487796,\n",
       " 2487889,\n",
       " 2388929,\n",
       " 2488042,\n",
       " 2357536,\n",
       " 2427032,\n",
       " 2428344,\n",
       " 2487956,\n",
       " 2383660,\n",
       " 2378426,\n",
       " 28340407,\n",
       " 2391585,\n",
       " 2397816,\n",
       " 2449323,\n",
       " 2490383,\n",
       " 2391279,\n",
       " 2514815,\n",
       " 2367105,\n",
       " 2358820,\n",
       " 2464592,\n",
       " 2475687,\n",
       " 2436704,\n",
       " 2451822,\n",
       " 2352824,\n",
       " 2508428,\n",
       " 2407517,\n",
       " 2486340,\n",
       " 2441472,\n",
       " 2430683,\n",
       " 2449808,\n",
       " 2512636,\n",
       " 2357024,\n",
       " 2383489,\n",
       " 2465512,\n",
       " 2478307,\n",
       " 2450022,\n",
       " 2463583,\n",
       " 2452078,\n",
       " 2508533,\n",
       " 2381475,\n",
       " 2520077,\n",
       " 2355944,\n",
       " 2458833,\n",
       " 2358492,\n",
       " 2503863,\n",
       " 2423945,\n",
       " 2357473,\n",
       " 2354447,\n",
       " 2488802,\n",
       " 2486982,\n",
       " 2482128,\n",
       " 2385304,\n",
       " 2473224,\n",
       " 2354490,\n",
       " 2500105,\n",
       " 2380358,\n",
       " 2487129,\n",
       " 2506911,\n",
       " 2414469,\n",
       " 2459269,\n",
       " 2473475,\n",
       " 2419946,\n",
       " 2439482,\n",
       " 2371464,\n",
       " 2429187,\n",
       " 2380213,\n",
       " 2406008,\n",
       " 2466256,\n",
       " 2487180,\n",
       " 2378015,\n",
       " 2436565,\n",
       " 2460389,\n",
       " 2394734,\n",
       " 2443945,\n",
       " 2442818,\n",
       " 2427665,\n",
       " 2522292,\n",
       " 2411084,\n",
       " 2408976,\n",
       " 2420610,\n",
       " 2480201,\n",
       " 2379200,\n",
       " 2410128,\n",
       " 2359991,\n",
       " 2427690,\n",
       " 2490057,\n",
       " 2461253,\n",
       " 2407405,\n",
       " 2480894,\n",
       " 2487870,\n",
       " 2364559,\n",
       " 2497646,\n",
       " 2482949,\n",
       " 2391446,\n",
       " 2452629,\n",
       " 2402726,\n",
       " 2503523,\n",
       " 2467212,\n",
       " 2404850,\n",
       " 2453369,\n",
       " 2453984,\n",
       " 2493227,\n",
       " 2524811,\n",
       " 2352491,\n",
       " 2425873,\n",
       " 2440351,\n",
       " 2354141,\n",
       " 2452537,\n",
       " 2412843,\n",
       " 2487610,\n",
       " 2503713,\n",
       " 2426010,\n",
       " 2412837,\n",
       " 2433662,\n",
       " 2523945,\n",
       " 2459618,\n",
       " 2370568,\n",
       " 2466942,\n",
       " 2488845,\n",
       " 2477058,\n",
       " 2408784,\n",
       " 2378695,\n",
       " 2464118,\n",
       " 2428184,\n",
       " 2405797,\n",
       " 2488916,\n",
       " 2478522,\n",
       " 2475492,\n",
       " 2504633,\n",
       " 2465715,\n",
       " 2511258,\n",
       " 2374635,\n",
       " 2494126,\n",
       " 2498315,\n",
       " 2470457,\n",
       " 2470103,\n",
       " 2398401,\n",
       " 2487384,\n",
       " 2436084,\n",
       " 2385250,\n",
       " 2400539,\n",
       " 2467721,\n",
       " 2487460,\n",
       " 2468963,\n",
       " 2405641,\n",
       " 2419175,\n",
       " 2474876,\n",
       " 2375810,\n",
       " 2483357,\n",
       " 2353019,\n",
       " 2400183,\n",
       " 2448187,\n",
       " 2429708,\n",
       " 2502265,\n",
       " 2507261,\n",
       " 2368947,\n",
       " 2435724,\n",
       " 2423467,\n",
       " 2469081,\n",
       " 2457000,\n",
       " 2503418,\n",
       " 2449851,\n",
       " 2389876,\n",
       " 2489314,\n",
       " 2380893,\n",
       " 2465890,\n",
       " 2408095,\n",
       " 2432286,\n",
       " 2416847,\n",
       " 2447466,\n",
       " 2514383,\n",
       " 2362031,\n",
       " 2517863,\n",
       " 2383552,\n",
       " 2464639,\n",
       " 2499659,\n",
       " 2458410,\n",
       " 2452272,\n",
       " 2512937,\n",
       " 2505987,\n",
       " 2376926,\n",
       " 2378319,\n",
       " 2512682,\n",
       " 2507158,\n",
       " 2398316,\n",
       " 2408354,\n",
       " 2505922,\n",
       " 2484861,\n",
       " 2375543,\n",
       " 2384895,\n",
       " 2498846,\n",
       " 2493889,\n",
       " 2384020,\n",
       " 2418244,\n",
       " 2434560,\n",
       " 2450465,\n",
       " 2391230,\n",
       " 2512106,\n",
       " 2400767,\n",
       " 2488836,\n",
       " 2351598,\n",
       " 2510744,\n",
       " 2353412,\n",
       " 2460448,\n",
       " 2360899,\n",
       " 2426709,\n",
       " 2456416,\n",
       " 2354842,\n",
       " 2362930,\n",
       " 2477080,\n",
       " 2397796,\n",
       " 2436453,\n",
       " 2393444,\n",
       " 2385447,\n",
       " 2521361,\n",
       " 2356381,\n",
       " 2427199,\n",
       " 2450083,\n",
       " 2518344,\n",
       " 2444674,\n",
       " 2398255,\n",
       " 2517245,\n",
       " 2485177,\n",
       " 2381303,\n",
       " 2515048,\n",
       " 2414913,\n",
       " 2401427,\n",
       " 2364254,\n",
       " 2442564,\n",
       " 23417225,\n",
       " 2477147,\n",
       " 2421250,\n",
       " 2516864,\n",
       " 2373572,\n",
       " 2355124,\n",
       " 2462248,\n",
       " 2467662,\n",
       " 2520100,\n",
       " 2413753,\n",
       " 2389087,\n",
       " 2371863,\n",
       " 2480733,\n",
       " 2474897,\n",
       " 2389559,\n",
       " 2438795,\n",
       " 2495968,\n",
       " 2400052,\n",
       " 2404367,\n",
       " 2475747]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def Removedups(duplicate): \n",
    "    final_list = [] \n",
    "    for num in duplicate: \n",
    "        if num not in final_list: \n",
    "            final_list.append(num) \n",
    "    return final_list \n",
    "\n",
    "list_city_ids = Removedups(list_city_ids)\n",
    "\n",
    "list_city_ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Top Twitter Trends for each City\n",
    "\n",
    "twitter_trends = []\n",
    "\n",
    "for cityid in list_city_ids:\n",
    "    try:\n",
    "        trends1 = api.trends_place(cityid)\n",
    "        twitter_trends.append(trends1)\n",
    "    except:\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "for trend in twitter_trends:\n",
    "    for trendelement in trend:\n",
    "        db.twitter_trends.insert_one(trendelement)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New York\n",
      "Trend Topic #1: Jill Scott\n",
      "Los Angeles\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Chicago\n",
      "Trend Topic #1: #NationalPickleDay\n",
      "Houston\n",
      "Trend Topic #1: #NationalSigningDay\n",
      "Phoenix\n",
      "Trend Topic #1: #WednesdayWisdom\n",
      "Philadelphia\n",
      "Trend Topic #1: Halloween\n",
      "San Antonio\n",
      "Trend Topic #1: Stan Lee\n",
      "Dallas-Ft. Worth\n",
      "Trend Topic #1: Win A Copy Of The Book\n",
      "San Diego\n",
      "Trend Topic #1: #WorldKindnessDay\n",
      "San Jose\n",
      "Trend Topic #1: #SJSharks\n",
      "Detroit\n",
      "Trend Topic #1: Jill Scott\n",
      "San Francisco\n",
      "Trend Topic #1: #WednesdayWisdom\n",
      "Jacksonville\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Indianapolis\n",
      "Trend Topic #1: Noblesville\n",
      "Austin\n",
      "Trend Topic #1: #NCAAXC\n",
      "Columbus\n",
      "Trend Topic #1: House\n",
      "Charlotte\n",
      "Trend Topic #1: rb kenjon barner\n",
      "Memphis\n",
      "Trend Topic #1: #memwx\n",
      "Baltimore\n",
      "Trend Topic #1: #Ravens\n",
      "Boston\n",
      "Trend Topic #1: Alex Cora\n",
      "El Paso\n",
      "Trend Topic #1: I-10 West\n",
      "Milwaukee\n",
      "Trend Topic #1: #Wisconsin\n",
      "Denver\n",
      "Trend Topic #1: #NationalPickleDay\n",
      "Seattle\n",
      "Trend Topic #1: K.J. Wright\n",
      "Nashville\n",
      "Trend Topic #1: Red Carpet\n",
      "Washington\n",
      "Trend Topic #1: #livesummit\n",
      "Las Vegas\n",
      "Trend Topic #1: North Las Vegas\n",
      "Portland\n",
      "Trend Topic #1: #WorldKindnessDay\n",
      "Louisville\n",
      "Trend Topic #1: #GoCards\n",
      "Oklahoma City\n",
      "Trend Topic #1: #AQHAWorldShow\n",
      "Tucson\n",
      "Trend Topic #1: #ALAN2018\n",
      "Atlanta\n",
      "Trend Topic #1: #CMAawards\n",
      "Albuquerque\n",
      "Trend Topic #1: Albuquerque\n",
      "Kansas City\n",
      "Trend Topic #1: #GEWKC\n",
      "Fresno\n",
      "Trend Topic #1: #CampFire\n",
      "Sacramento\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Long Beach\n",
      "Trend Topic #1: #WoolseyFire\n",
      "Mesa\n",
      "Trend Topic #1: #azwx\n",
      "Omaha\n",
      "Trend Topic #1: #Nebraska\n",
      "Cleveland\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Virginia Beach\n",
      "Trend Topic #1: #Monarchs\n",
      "Miami\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Raleigh\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Minneapolis\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Colorado Springs\n",
      "Trend Topic #1: #BuchaWrestU23\n",
      "Honolulu\n",
      "Trend Topic #1: #HITraffic\n",
      "St. Louis\n",
      "Trend Topic #1: Michael Avenatti\n",
      "Tampa\n",
      "Trend Topic #1: Michael Avenatti\n",
      "New Orleans\n",
      "Trend Topic #1: Brandon Marshall\n",
      "Cincinnati\n",
      "Trend Topic #1: Hue Jackson\n",
      "Pittsburgh\n",
      "Trend Topic #1: 11 news\n",
      "Greensboro\n",
      "Trend Topic #1: Michael Avenatti\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for j in range(0,len(twitter_trends)):\n",
    "    for  i in range(0,1):\n",
    "        print(twitter_trends[j][0][\"locations\"][0][\"name\"])\n",
    "        print (\"Trend Topic #\" + str(i+1) + \": \"+ twitter_trends[j][0][\"trends\"][i][\"name\"])\n",
    "        #print (\"Tweet Volume: \"+ str(twitter_trends[j][0][\"trends\"][i][\"tweet_volume\"]))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "public_tweets = api.search(twitter_trends[0][0][\"trends\"][1][\"name\"], tweet_mode=\"extended\", count=25, result_type=\"recent\", geocode=\"40.7127837,-74.0059413,50mi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1107\n",
      "Collaborators and fans across comics, film, and television bid farewell to Stan Lee: https://t.co/m0MmBmoTcT\n",
      "1\n",
      "12609\n",
      "Stan Lee didn't create the Fantastic Four until he was 39. Everything we know about Stan Lee, his entire world-changing body of work, occurred in the second half of his long life.\n",
      "2\n",
      "14832\n",
      "Marvel and The Walt Disney Company salute the life and career of Stan Lee and offer our undying gratitude for his unmatchable accomplishments within our halls. Every time you open a Marvel comic, Stan will be there. Please join us in remembering Stan \"The Man\" Lee. https://t.co/ptjxlrvgQx\n",
      "3\n",
      "12609\n",
      "Stan Lee didn't create the Fantastic Four until he was 39. Everything we know about Stan Lee, his entire world-changing body of work, occurred in the second half of his long life.\n",
      "4\n",
      "122563\n",
      "Today, we pause and reflect with great sadness on the passing of Stan Lee: https://t.co/J0cwgdn677 https://t.co/eOBdZAqdZ0\n",
      "5\n",
      "91\n",
      "#ThisWeekInMarvel and #EarthsMightiestShow hosts @AgentM and @LorraineCink share their favorite memories of the one and only Stan Lee and discuss their view of his legacy on comics and pop culture. Watch: https://t.co/xDJo7LBSbk\n",
      "6\n",
      "825\n",
      "Stan Lee, the Marvel Comics chairman emeritus, has passed away. For two decades, one writer regularly met Lee for lunch, where they discussed everything from Lee's love of the Cheesecake Factory to his take on religion. RIP to “Stan the Man”\n",
      "https://t.co/cSbDWy5bkv\n",
      "7\n",
      "14832\n",
      "Marvel and The Walt Disney Company salute the life and career of Stan Lee and offer our undying gratitude for his unmatchable accomplishments within our halls. Every time you open a Marvel comic, Stan will be there. Please join us in remembering Stan \"The Man\" Lee. https://t.co/ptjxlrvgQx\n",
      "8\n",
      "1107\n",
      "Collaborators and fans across comics, film, and television bid farewell to Stan Lee: https://t.co/m0MmBmoTcT\n",
      "9\n",
      "1031\n",
      "Spider-Man was more than just another Super Hero to Stan Lee. See why the web-slinger was one of his favorite co-creations: https://t.co/Z8sbl6bOzH\n",
      "10\n",
      "14832\n",
      "Marvel and The Walt Disney Company salute the life and career of Stan Lee and offer our undying gratitude for his unmatchable accomplishments within our halls. Every time you open a Marvel comic, Stan will be there. Please join us in remembering Stan \"The Man\" Lee. https://t.co/ptjxlrvgQx\n",
      "11\n",
      "122563\n",
      "Today, we pause and reflect with great sadness on the passing of Stan Lee: https://t.co/J0cwgdn677 https://t.co/eOBdZAqdZ0\n",
      "12\n",
      "34\n",
      "X-Men theme rehearsal for @2M2LN at Comicon 2018: https://t.co/XDzmrgTmHU \n",
      "\n",
      "RIP Stan Lee. https://t.co/CzEoG3OxoC\n",
      "13\n",
      "0\n",
      "RT &amp; enter to win a X-Men poster signed by Stan Lee from @steinersports! ⬇️ https://t.co/5s599qwrjI\n",
      "14\n",
      "1\n",
      "RT @esquire: \"Not yet.\" https://t.co/ODTQKAqz6w\n",
      "15\n",
      "311\n",
      "Yesterday i googled young Stan Lee and I realized that he looked a little like @theodd1sout ? https://t.co/xXtIrOFhcs\n",
      "16\n",
      "93\n",
      "Hi. Lists are mostly about your network. Stan Lee didn't come up w/ Spider-Man until he was 40. Vera Wang decided to become a designer at 40. Julia Child's first cookbook was published when she was 39. Toni Morrison didn't publish The Bluest Eye until she was 40. Keep doing you.\n",
      "17\n",
      "40\n",
      "Yesterday I completed a farewell piece for the legend “Stan Lee!” This piece was very hard to complete, but I manage. Thanks for making my childhood wonderful. I’ll miss you Mr.Lee. We all will. @Marvel \n",
      "\n",
      "#ripstanlee #stanlee #marvel #excelsior #comic #spiderman https://t.co/DNyX9zmBPy\n",
      "18\n",
      "197\n",
      "We’re giving away a X-Men poster signed by Stan Lee! https://t.co/hePMOadpzf\n",
      "19\n",
      "19\n",
      "RIP to the legend, Stan Lee, who passed away at 95 https://t.co/iySEUsYzQf\n",
      "20\n",
      "1\n",
      "\"Not yet.\" https://t.co/ODTQKAqz6w\n",
      "21\n",
      "0\n",
      "RT @robg329: RT &amp; enter to win a X-Men poster signed by Stan Lee from @steinersports! ⬇️ https://t.co/IGeJ0oITeP\n",
      "22\n",
      "122563\n",
      "Today, we pause and reflect with great sadness on the passing of Stan Lee: https://t.co/J0cwgdn677 https://t.co/eOBdZAqdZ0\n",
      "23\n",
      "158\n",
      "Nets G Spencer Dinwiddie will honor the late Stan Lee with custom artwork on his sneakers in tonight’s game vs. MIA. Dinwiddie produced the shoe himself &amp; will wear a different self-produced shoe in all 82 games this year. Shoes will be auctioned off to benefit youth charities. https://t.co/xO3LgaZJbI\n",
      "24\n",
      "1107\n",
      "Collaborators and fans across comics, film, and television bid farewell to Stan Lee: https://t.co/m0MmBmoTcT\n"
     ]
    }
   ],
   "source": [
    "i=0\n",
    "for tweet in public_tweets['statuses']:\n",
    "    print(i)\n",
    "    pprint (tweet[\"retweet_count\"])\n",
    "    if tweet[\"retweet_count\"] >1:\n",
    "        print(tweet[\"retweeted_status\"][\"full_text\"])\n",
    "    else:\n",
    "        print(tweet[\"full_text\"])\n",
    "    i=i+1\n",
    "  \n",
    "#pprint(public_tweets['statuses'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run Vader Analysis on each tweet\n",
    "vader_scores=[]\n",
    "\n",
    "for tweet in public_tweets['statuses']:\n",
    "    if tweet[\"retweet_count\"] >1:\n",
    "        score = analyzer.polarity_scores(tweet[\"retweeted_status\"][\"full_text\"])\n",
    "    else:\n",
    "        score = analyzer.polarity_scores(tweet[\"full_text\"])\n",
    "    if score[\"neu\"] != 1:\n",
    "        vader_scores.append(score[\"compound\"]) \n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-0.5773,\n",
       " 0.9081,\n",
       " -0.5773,\n",
       " 0.296,\n",
       " 0.6369,\n",
       " 0.7906,\n",
       " 0.9081,\n",
       " 0.8885,\n",
       " 0.9081,\n",
       " 0.296,\n",
       " 0.6239,\n",
       " 0.2975,\n",
       " 0.8379,\n",
       " 0.4003,\n",
       " 0.6239,\n",
       " 0.296,\n",
       " 0.7556]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vader_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4889882352941176"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(vader_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "nteract": {
   "version": "0.8.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
